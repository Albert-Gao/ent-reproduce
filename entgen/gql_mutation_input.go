// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"time"
)

// CreateProfileInput represents a mutation input for creating profiles.
type CreateProfileInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	NickName   string
	OwnerID    string
	TenantID   string
}

// Mutate applies the CreateProfileInput on the ProfileMutation builder.
func (i *CreateProfileInput) Mutate(m *ProfileMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetNickName(i.NickName)
	m.SetOwnerID(i.OwnerID)
	m.SetTenantID(i.TenantID)
}

// SetInput applies the change-set in the CreateProfileInput on the ProfileCreate builder.
func (c *ProfileCreate) SetInput(i CreateProfileInput) *ProfileCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProfileInput represents a mutation input for updating profiles.
type UpdateProfileInput struct {
	UpdateTime  *time.Time
	NickName    *string
	ClearOwner  bool
	OwnerID     *string
	ClearTenant bool
	TenantID    *string
}

// Mutate applies the UpdateProfileInput on the ProfileMutation builder.
func (i *UpdateProfileInput) Mutate(m *ProfileMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.NickName; v != nil {
		m.SetNickName(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearTenant {
		m.ClearTenant()
	}
	if v := i.TenantID; v != nil {
		m.SetTenantID(*v)
	}
}

// SetInput applies the change-set in the UpdateProfileInput on the ProfileUpdate builder.
func (c *ProfileUpdate) SetInput(i UpdateProfileInput) *ProfileUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProfileInput on the ProfileUpdateOne builder.
func (c *ProfileUpdateOne) SetInput(i UpdateProfileInput) *ProfileUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	Name       *string
	ProfileIDs []string
	TenantIDs  []string
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.ProfileIDs; len(v) > 0 {
		m.AddProfileIDs(v...)
	}
	if v := i.TenantIDs; len(v) > 0 {
		m.AddTenantIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdateTime       *time.Time
	ClearName        bool
	Name             *string
	AddProfileIDs    []string
	RemoveProfileIDs []string
	AddTenantIDs     []string
	RemoveTenantIDs  []string
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.AddProfileIDs; len(v) > 0 {
		m.AddProfileIDs(v...)
	}
	if v := i.RemoveProfileIDs; len(v) > 0 {
		m.RemoveProfileIDs(v...)
	}
	if v := i.AddTenantIDs; len(v) > 0 {
		m.AddTenantIDs(v...)
	}
	if v := i.RemoveTenantIDs; len(v) > 0 {
		m.RemoveTenantIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
