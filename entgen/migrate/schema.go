// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ProfilesColumns holds the columns for the "profiles" table.
	ProfilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "nick_name", Type: field.TypeString, Size: 70},
		{Name: "tenant_id", Type: field.TypeString},
		{Name: "owner_id", Type: field.TypeString},
	}
	// ProfilesTable holds the schema information for the "profiles" table.
	ProfilesTable = &schema.Table{
		Name:       "profiles",
		Columns:    ProfilesColumns,
		PrimaryKey: []*schema.Column{ProfilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "profiles_tenants_memberProfiles",
				Columns:    []*schema.Column{ProfilesColumns[4]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "profiles_users_profiles",
				Columns:    []*schema.Column{ProfilesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "profile_owner_id_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{ProfilesColumns[5], ProfilesColumns[4]},
			},
		},
	}
	// TenantsColumns holds the columns for the "tenants" table.
	TenantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 70},
	}
	// TenantsTable holds the schema information for the "tenants" table.
	TenantsTable = &schema.Table{
		Name:       "tenants",
		Columns:    TenantsColumns,
		PrimaryKey: []*schema.Column{TenantsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserTenantsColumns holds the columns for the "user_tenants" table.
	UserTenantsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "tenant_id", Type: field.TypeString},
	}
	// UserTenantsTable holds the schema information for the "user_tenants" table.
	UserTenantsTable = &schema.Table{
		Name:       "user_tenants",
		Columns:    UserTenantsColumns,
		PrimaryKey: []*schema.Column{UserTenantsColumns[0], UserTenantsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_tenants_user_id",
				Columns:    []*schema.Column{UserTenantsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_tenants_tenant_id",
				Columns:    []*schema.Column{UserTenantsColumns[1]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ProfilesTable,
		TenantsTable,
		UsersTable,
		UserTenantsTable,
	}
)

func init() {
	ProfilesTable.ForeignKeys[0].RefTable = TenantsTable
	ProfilesTable.ForeignKeys[1].RefTable = UsersTable
	UserTenantsTable.ForeignKeys[0].RefTable = UsersTable
	UserTenantsTable.ForeignKeys[1].RefTable = TenantsTable
}
